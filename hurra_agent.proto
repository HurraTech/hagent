syntax = "proto3";

option go_package = "proto";

package proto;

service HurraAgent {
    rpc MountDrive(MountDriveRequest) returns (MountDriveResponse) {}
    rpc UnmountDrive(UnmountDriveRequest) returns (UnmountDriveResponse) {}
    rpc FormatDrive(FormatDriveRequest) returns (FormatDriveResponse) {}
    rpc FormatPartition(FormatPartitionRequest) returns (FormatPartitionResponse) {}
    rpc CopyFiles(CopyFilesRequest) returns (CopyFilesResponse) {}

    rpc GetSystemStats(GetSystemStatsRequest) returns (GetSystemStatsResponse) {}
    rpc GetDrives(GetDrivesRequest) returns (GetDrivesResponse) {}
    rpc LoadImage(LoadImageRequest) returns (LoadImageResponse) {}
    rpc UnloadImage(UnloadImageRequest) returns (UnloadImageResponse) {}
    rpc RunContainer(RunContainerRequest) returns (RunContainerResponse) {}
    rpc KillContainer(KillContainerRequest) returns (KillContainerResponse) {}
    rpc RunContainerSpec(ContainerSpecRequest) returns (ContainerSpecResponse) {}
    rpc StopContainerSpec(ContainerSpecRequest) returns (ContainerSpecResponse) {}
    rpc StartContainerInSpec(ContainerSpecRequest) returns (ContainerSpecResponse) {}
    rpc StopContainerInSpec(ContainerSpecRequest) returns (ContainerSpecResponse) {}
    rpc RemoveContainerSpec(ContainerSpecRequest) returns (ContainerSpecResponse) {}
    rpc GetContainerPortBindingInSpec(ContainerPortBindingInSpecRequest) returns (ContainerPortBindingInSpecResponse) {}
    rpc ExecInContainerSpec(ExecInContainerSpecRequest) returns (ExecInContainerSpecResponse) {}

    rpc UpdateSystem(UpdateSystemRequest) returns (UpdateSystemResult) {}
    rpc UpdateSystemStatus(UpdateSystemStatusRequest) returns (UpdateSystemResult) {}

    rpc ExecCommand(Command) returns (Result) {}
}

message GetSystemStatsRequest { }

message GetSystemStatsResponse {
    double load_average = 1;
    double uptime = 2;
    uint64 memory_total = 3;
    uint64 memory_free = 4;
    uint64 memory_cached = 5;
    uint64 disk_reads = 6;
    uint64 disk_writes = 7; 
    uint64 network_received = 8;
    uint64 network_sent = 9;
}

message UpdateSystemStatusRequest { }

message UpdateSystemResult {
    string status = 1;
    string version = 2;
}

message UpdateSystemRequest {
    string image_url = 1;
    string username = 2;
    string password = 3;
    string hash = 4;
}

message FormatDriveRequest {
    string device_file = 1;
}

message FormatDriveResponse {
}


message FormatPartitionRequest {
    string device_file = 1;
}

message FormatPartitionResponse {
}

message CopyFilesRequest {
    string source = 1;
    string target = 2;
}

message CopyFilesResponse {

}

message RunContainerRequest {
    string name = 1;
    string image = 2;
    uint32 port_mapping_source = 3;
    uint32 port_mapping_target = 4;
    string env = 5;
}

message RunContainerResponse {

}

message KillContainerRequest {
    string name = 1;
}

message KillContainerResponse {

}


message ContainerSpecRequest {
    string name = 1;
    string context = 2;
    string spec = 3;
    string container_name = 4;
}

message ContainerSpecResponse {
}



message ContainerPortBindingInSpecRequest {
    string name = 1;
    string context = 2;
    string spec = 3;
    string container_name = 4;
    uint32 container_port = 5;
}

message ContainerPortBindingInSpecResponse {
    uint32 port_binding = 1;
}

message ExecInContainerSpecRequest {
    string name = 1;
    string context = 2;
    string spec = 3;
    string container_name = 4;
    string cmd = 5;
    string args = 6;
    string env = 7;
}

message ExecInContainerSpecResponse {
    string output = 1;
}


message LoadImageRequest {
    string URL = 1;
    string username = 2;
    string password = 3;
}

message LoadImageResponse {

}

message UnloadImageRequest {
    string tag = 1;
}

message UnloadImageResponse {

}



message MountDriveResponse {
    bool is_successful = 2;
}

message MountDriveRequest {
    string device_file = 1;
    string mount_point = 2;
    string filesystem = 3;
}

message UnmountDriveRequest {
    string mount_point = 1;
}

message UnmountDriveResponse {
    bool is_successful = 2;
}

message GetDrivesRequest {
}

message GetDrivesResponse {
    repeated Drive drives = 1;
}

message Drive {
    string name = 1;
    string device_file = 2;
    uint64 size_bytes = 3;
    bool is_removable = 4;
    string type = 5;
    string serial_number = 6;
    string storage_controller = 7;
    string vendor = 8;
    repeated Partition partitions = 9;
}

message Partition {
    uint32 index = 1;
    string name = 2;
    string device_file = 3;
    uint64 size_bytes = 4;
    uint64 available_bytes = 5;
    string filesystem = 6;
    string mount_point = 7;
    string label = 8;
    bool is_read_only = 9;

}

message Result {
  int32 exitCode = 1;
  string message = 2;
}

message Command {
  string command = 1;
}

